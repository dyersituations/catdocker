upstream rails_app {
  server $APP_NAME-app:3000;
}

# Direct www to non-www.
server {
  server_name www.$APP_NAME.com;
  return 301 $scheme://$APP_NAME.com$request_uri;
}

# server {
#   listen 80;
#   server_name $APP_NAME.com;

#   location /.well-known/acme-challenge/ {
#     root /var/www/certbot;
#   }

#   location / {
#     return 301 https://$host$request_uri;
#   }    
# }

server {
  listen 80;
  # listen 443 ssl;
  server_name $APP_NAME.com;

  # ssl_certificate /etc/letsencrypt/live/$APP_NAME.com/fullchain.pem;
  # ssl_certificate_key /etc/letsencrypt/live/$APP_NAME.com/privkey.pem;

  # include /etc/letsencrypt/options-ssl-nginx.conf;
  # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  # Define the public application root.
  root   $RAILS_ROOT/public;
  index  index.html;

  # Define where Nginx should write its logs.
  access_log $RAILS_ROOT/log/nginx.access.log;
  error_log $RAILS_ROOT/log/nginx.error.log;

  # Deny requests for files that should never be accessed.
  location ~ /\. {
    deny all;
  }

  # Deny requests for ruby and log files.
  location ~* ^.+\.(rb|log)$ {
    deny all;
  }

  # Serve static (compiled) assets directly if they exist (for rails production).
  location ~ ^/(assets|images|javascripts|stylesheets|swfs|system|uploads)/ {
    try_files $uri @rails;

    access_log off;

    # Serve pre-gzipped version.
    gzip_static on;

    expires max;
    add_header Cache-Control public;

    # Some browsers still send conditional-GET requests if there's a
    # Last-Modified header or an ETag header even if they haven't
    # reached the expiry date sent in the Expires header.
    add_header Last-Modified "";
    add_header ETag "";
    break;
  }

  # Send non-static file requests to the app server.
  location / {
    try_files $uri @rails;
  }

  location @rails {
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://rails_app;
  }
}